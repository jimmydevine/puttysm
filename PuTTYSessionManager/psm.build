<?xml version="1.0" encoding="utf-8" ?>
<project xmlns="http://nant.sf.net/release/0.85/nant.xsd"
         name="PuTTY Session Manager" 
         default="rebuild"
         basedir="..">
  
  <property name="configuration" value="release"/>
  
  <property name="dir.nantcontrib" value="C:/Program Files/nant/nantcontrib-0.85-nightly-2006-10-08"/>
  <property name="dir.svn" value="C:/Program Files/subversion/bin"/>
  <property name="dir.nsis" value="C:/Program Files/NSIS"/>

  <property name="dir.psmbase" value="PuTTYSessionManager"/>
  <property name="dir.buildinfo" value="${dir.psmbase}/buildinfo"/>
  <property name="dir.installer" value="Installer"/>
  <property name="dir.release" value="release"/>
  <property name="dir.build" value="${dir.psmbase}/bin/${configuration}"/>
    
  <property name="build.version.filename" value="${dir.buildinfo}/basever.txt"/>
  <property name="build.svnrev.filename" value="${dir.buildinfo}/svnrev.txt"/>
  <property name="build.export" value="false"/>

  <property name="output.exe" value="PuTTY Session Manager.exe"/>
  <property name="output.config" value="PuTTY Session Manager.exe.config"/>
  <property name="output.changelog" value="changelog.txt"/>
  <property name="output.licence" value="gpl.txt"/>

  <target name="init" >
    <loadtasks assembly="${dir.nantcontrib}/bin/NAnt.Contrib.Tasks.dll" />
  </target>
  
  <target name="clean" 
          depends="init,setversionstring" 
          description="Delete all previously compiled binaries.">
    <delete>
      <fileset>
        <include name="**/bin/**" />
        <include name="**/obj/**" />
        <include name="**/*.suo" />
        <include name="**/*.user" />
      </fileset>
    </delete>
    <delete>
      <fileset basedir="${dir.installer}">
          <include name="psm-setup-*.exe" />
          <include name="Version.txt" />
          <include name="GetVersion.exe" />
      </fileset>
    </delete>
    <delete>      
      <fileset basedir="${dir.deploy}">
        <include name="*"/>
      </fileset>      
    </delete>
  </target>

  <target name="build" 
          depends="init"
          description="Build all targets.">
    <call target="build.psm"/>
  </target>

  <target name="rebuild" 
          depends="clean, build" />

  <target name="getversion"
          description="Populate the version properties based on the version.txt file">
    <echo message="${project::get-base-directory()}"/>
    <script language="C#" >
      <code>
        <![CDATA[
    public static void ScriptMain(Project project)
    {
     // parse version document to get version information
     string fileName = Path.Combine(project.BaseDirectory, project.Properties["build.version.filename"]);
     StreamReader reader = new StreamReader(fileName);
     string versionInfo = reader.ReadLine();
     reader.Close();
     Regex pattern = new Regex("[0-9]+");
     MatchCollection matches = pattern.Matches(versionInfo);
     if (matches.Count != 4)
      throw new Exception(string.Format("Version number {0} in {1} has incorrect format.", versionInfo, fileName));
     int major = int.Parse(matches[0].Value);
     int minor = int.Parse(matches[1].Value);
     int build = int.Parse(matches[2].Value);
     int revision = int.Parse(matches[3].Value);
     project.Properties.Add("build.version.major", major.ToString());
     project.Properties.Add("build.version.minor", minor.ToString());
     project.Properties.Add("build.version.build", build.ToString());
     project.Properties.Add("build.version.revision", revision.ToString());
    }
   ]]>
      </code>
    </script>
  </target>

  <target name="getsvnversion"
         depends="getversion"
         description="Populate the build.version.svnversion and build.export properties" >
    <exec program="${dir.svn}/svnversion.exe"
          workingdir="${nant::get-base-directory()}"
          commandline="&quot;${project::get-base-directory()}&quot;"
          output="${build.svnrev.filename}">
    </exec>
    <loadfile file="${build.svnrev.filename}"
              property="build.version.svnversion"/>
    <!-- If the code has been exported, leave the properties unchanged-->
    <if test="${build.version.svnversion == 'exported'}">
      <echo message="EXPORTED"/>
      <property name="build.export" value="true"/>
    </if>
  </target>

  <target name="setsvnrevision"
        depends="getsvnversion"
        unless="${build.export == 'true'}"
        description ="Parse build.version.svnversion property">

    <property name="svnrev.startindex" value="0"/>
    <property name="svnrev.endindex" value="${string::get-length(build.version.svnversion)}"/>

    <if test="${string::index-of(build.version.svnversion,':') > 0}">
      <echo message="MIXED"/>
      <property name="build.version.revision" value="3"/>
      <property name="svnrev.startindex" value="${string::index-of(build.version.svnversion,':')+1}"/>
    </if>

    <if test="${string::index-of(build.version.svnversion,'S') > 0}">
      <echo message="SWITCHED"/>
      <property name="svnrev.endindex" value="${string::index-of(build.version.svnversion,'S')}"/>
      <property name="build.version.revision" value="2"/>
    </if>

    <if test="${string::index-of(build.version.svnversion,'M') > 0}">
      <echo message="MODIFIED"/>
      <property name="svnrev.endindex" value="${string::index-of(build.version.svnversion,'M')}"/>
      <property name="build.version.revision" value="1"/>
    </if>
    <property name="build.version.svnrev"
              value="${string::substring(build.version.svnversion, svnrev.startindex, svnrev.endindex)}"/>
    <property name="build.version.build" value="${build.version.svnrev}"/>
    <echo message="${build.version.build}.${build.version.revision}"/>
  </target>

  <target name="setversionstring"
        depends="setsvnrevision" 
        description="Set the build.version.versionstring property">
    <script language="C#">
      <code>
        <![CDATA[
    public static void ScriptMain(Project project)
    {
     string versionString = string.Format("{0}.{1}.{2}.{3}",
      project.Properties["build.version.major"],
      project.Properties["build.version.minor"],
      project.Properties["build.version.build"],
      project.Properties["build.version.revision"]
     );
     project.Properties["build.version.versionstring"] = versionString;
     project.Log(Level.Info, versionString);
    }
   ]]>
      </code>
    </script>
    <property name="dir.deploy" value="${dir.release}/${build.version.versionstring}"/>
  </target>

  <target name="setversion"
          depends="setversionstring"
          description="Stamp the version info onto assemblyinfo.cs files">
    <foreach item="File" property="filename">
      <in>
        <items basedir=".">
          <include name="**\AssemblyInfo.cs"></include>
        </items>
      </in>
      <do>
        <script language="C#">
          <code>
            <![CDATA[
     public static void ScriptMain(Project project)
     {
      //FileStream file = File.Open(project.Properties["filename"], FileMode.Open, FileAccess.ReadWrite);
      StreamReader reader = new StreamReader(project.Properties["filename"]);
      string contents = reader.ReadToEnd();
      reader.Close();
      string replacementVersion = string.Format(
       "[assembly: AssemblyVersion(\"{0}.{1}.{2}.{3}\")]",
       project.Properties["build.version.major"],
       project.Properties["build.version.minor"],
       project.Properties["build.version.build"],
       project.Properties["build.version.revision"]
      );
      string replacementFileVersion = string.Format(
       "[assembly: AssemblyFileVersion(\"{0}.{1}.{2}.{3}\")]",
       project.Properties["build.version.major"],
       project.Properties["build.version.minor"],
       project.Properties["build.version.build"],
       project.Properties["build.version.revision"]
      );
      string newText = Regex.Replace(contents, @"\[assembly: AssemblyVersion\("".*""\)\]", replacementVersion);
      newText = Regex.Replace(newText, @"\[assembly: AssemblyFileVersion\("".*""\)\]", replacementFileVersion);
      StreamWriter writer = new StreamWriter(project.Properties["filename"], false);
      writer.Write(newText);
      writer.Close();
     }
     ]]>
          </code>
        </script>
      </do>
    </foreach>
  </target>
  
  <target name="build.psm"
         depends="setversion">

    <solution configuration="${configuration}" solutionfile="PuTTY Session Manager.sln">
    </solution>

    <fail unless="${file::exists(path::combine(dir.build,output.exe))}"
          message="Output file doesn't exist in ${output.exe}"/>

  </target>

  <target name="createinstaller"
          depends="build">
    <exec program="${dir.nsis}/makensis.exe"
          workingdir="${dir.installer}"
          commandline="/NOTIFYHWND 1049488  .\getversion.nsi"
          failonerror="true" />
    <exec program="${dir.nsis}/makensis.exe"
          workingdir="${dir.installer}"
          commandline="/NOTIFYHWND 1049488  .\psm.nsi"
          failonerror="true" />
  </target>

  <target name="cleaninstaller">
    <delete>
      <fileset>
        <include name="${dir.installer}/psm-setup-*.exe" />
        <include name="${dir.installer}/Version.txt" />
        <include name="${dir.installer}/GetVersion.exe" />
      </fileset>
    </delete>
  </target>

  <target name="createzip" 
          depends="build">
    <zip zipfile="${dir.build}/psm-binaries-${build.version.versionstring}.zip"
         verbose="true"
         failonerror="true">
      <fileset basedir="${dir.build}" failonempty="true">        
        <include name="${output.exe}"/>
        <include name="${output.config}"/>
        <include name="${output.changelog}"/>
        <include name="${output.licence}"/>
      </fileset>      
    </zip>
  </target>

  <target name="createsrczip"
          depends="build">
  </target>

  <target name="deploy"
          depends="createinstaller,createzip,createsrczip" >
    <mkdir dir="${dir.deploy}"/>
    <copy file="${dir.installer}/psm-setup-${build.version.versionstring}.exe"
          todir="${dir.deploy}"/>
    <copy file="${dir.build}/psm-binaries-${build.version.versionstring}.zip"
          todir="${dir.deploy}"/>
    <checksum algorithm="MD5" 
              fileext="md5">
      <fileset>
        <include name="${dir.deploy}/*.zip"/>
        <include name="${dir.deploy}/*.exe"/>
      </fileset>
    </checksum>
  </target>

</project>


